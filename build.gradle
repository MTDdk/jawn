buildscript {
  repositories { maven { url "https://plugins.gradle.org/m2/" } }
  //dependencies { classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.8' }
}

//http://gradle.org/docs/current/userguide/multi_project_builds.html#sub:real_life_examples

allprojects {
  apply plugin: 'java'
  
  // maven metadata
  group = 'net.javapla.jawn'
  version = '1.1.4-SNAPSHOT'
  // try to use this notion of versioning henceforth
  // https://github.com/jashkenas/backbone/issues/2888#issuecomment-29076249

  
  // compiler options
  sourceCompatibility = JavaVersion.VERSION_11
  targetCompatibility = JavaVersion.VERSION_11

  javadoc {
    enabled = true
  
    if(JavaVersion.current().isJava9Compatible()) {
      options.addBooleanOption('html5', true)
    }
  }

  
  // gradle publish | publishToMavenLocal
  apply from: "$rootProject.projectDir/maven.gradle"
}

subprojects {
  apply plugin: 'eclipse'
  apply plugin: 'jacoco'
//  apply plugin: 'net.ltgt.errorprone'


  repositories { mavenCentral() }
    
  dependencies {
    implementation 'com.google.guava:guava:28.2-jre'
    
    //Test across all submodules
    testImplementation ('junit:junit:4.13-rc-1') {
      exclude module: 'hamcrest-core'
    }
    testImplementation 'org.hamcrest:hamcrest-core:2.2'
    /*testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.5.2'
    testImplementation 'org.junit.platform:junit-platform-runner:1.5.2'*/
    
    //testCompile 'org.junit.jupiter:junit-jupiter-api:5.3.2'
    testImplementation 'org.mockito:mockito-core:3.3.3'
    testImplementation ('com.google.truth:truth:1.0.1')  {
      exclude module: 'guava' // We import it elsewhere to be concise in the versioning
      exclude module: 'junit'
    }
  }

  // test configurations
  tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

  test {
    testLogging {
      // Make sure output from
      // standard out or error is shown
      // in Gradle output.
      showStandardStreams = true
    }
    ignoreFailures false
  }
  
  jacocoTestReport {
    reports {
      xml.enabled false
      csv.enabled false
    }
    dependsOn test
  }
  
  /*tasks.withType(JavaCompile) {
   options.compilerArgs += [ '-Xep:DeadException:WARN', '-Xep:GuardedByValidator:OFF' ]
   }*/
  // implement https://github.com/kt3k/coveralls-gradle-plugin
}

//https://docs.gradle.org/current/dsl/org.gradle.api.artifacts.ResolutionStrategy.html
configurations.all {
  resolutionStrategy {
    // fail eagerly on version conflict (includes transitive dependencies)
    // e.g. multiple different versions of the same dependency (group and name are equal)
    failOnVersionConflict()
  }
}



/* ******************* */
//  Default implementation of the framework
/* ******************* */

// Specify the resulting archive
archivesBaseName = 'jawn'
apply plugin: 'java-library'
dependencies {
  // Currently, this is the only needed dependency that has everything you need
  api project(':jawn-core') // This is needed to be 'api' as it holds classes needed by implementors
  implementation project(':jawn-server-undertow') // These might be fine by being 'implementation'
  implementation project(':jawn-templates-stringtemplate')
}
